// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
pipeline {
  agent {
    node {
      label 'Hadoop'
    }
  }
  // work around for YETUS-508, requires maven outside of the dockerfile
  tools {
    maven 'Maven (latest)'
  }
  triggers {
    cron('@daily')
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '30'))
    timeout (time: 6, unit: 'HOURS')
    timestamps()
  }
  environment {
    TOOLS = "${env.WORKSPACE}/tools"
    // BASEDIR must be here because otherwise it won't work in post
    BASEDIR = "${env.WORKSPACE}/component"
    YETUS_RELEASE = '0.4.0'
    // OUTPUTDIR must be here because otherwise it won't work in post
    OUTPUTDIR = "${env.WORKSPACE}/artifacts"
  }
  parameters {
    booleanParam(name: 'USE_YETUS_PRERELEASE', defaultValue: false, description: '''Check to use the current HEAD of apache/yetus rather than our configured release.

    Should only be used manually when e.g. there is some non-work-aroundable issue in yetus we are checking a fix for.''')
  }
  stages {
    stage ('yetus check') {
      environment {
        PROJECT = 'hbase'
        PROJET_PERSONALITY = 'https://raw.githubusercontent.com/apache/hbase/master/dev-support/hbase-personality.sh'
        // This section of the docs tells folks not to use the javadoc tag. older branches have our old version of the check for said tag.
        AUTHOR_IGNORE_LIST = 'src/main/asciidoc/_chapters/developer.adoc,dev-support/test-patch.sh'
        WHITESPACE_IGNORE_LIST = '.*/generated/.*'
// These tests currently have known failures. Once they burn down to 0, remove from here so that new problems will cause a failure.
        TESTS_FILTER = 'cc,checkstyle,javac,javadoc,pylint,shellcheck,whitespace,perlcritic,ruby-lint,rubocop'
        BRANCH_SPECIFIC_DOCKERFILE = "${env.BASEDIR}/dev-support/docker/Dockerfile"
        EXCLUDE_TESTS_URL = 'https://builds.apache.org/job/HBase-Find-Flaky-Tests/lastSuccessfulBuild/artifact/excludes/'
      }
      steps {
    // TODO we can move the yetus install into a different stage and then use stash to deploy it.
        sh  '''#!/usr/bin/env bash
printenv
echo "Ensure we have a copy of Apache Yetus."
if [[ true !=  "${USE_YETUS_PRERELEASE}" ]]; then
  YETUS_DIR="${WORKSPACE}/yetus-${YETUS_RELEASE}"
  echo "Checking for Yetus ${YETUS_RELEASE} in '${YETUS_DIR}'"
  if [ ! -d "${YETUS_DIR}" ]; then
    echo "New download of Apache Yetus version ${YETUS_RELEASE}."
    rm -rf "${WORKSPACE}/.gpg"
    mkdir -p "${WORKSPACE}/.gpg"
    chmod -R 700 "${WORKSPACE}/.gpg"

    echo "install yetus project KEYS"
    curl -L --fail -o "${WORKSPACE}/KEYS_YETUS" https://dist.apache.org/repos/dist/release/yetus/KEYS
    gpg --homedir "${WORKSPACE}/.gpg" --import "${WORKSPACE}/KEYS_YETUS"

    echo "download yetus release ${YETUS_RELEASE}"
    curl -L --fail -O "https://dist.apache.org/repos/dist/release/yetus/${YETUS_RELEASE}/yetus-${YETUS_RELEASE}-bin.tar.gz"
    curl -L --fail -O "https://dist.apache.org/repos/dist/release/yetus/${YETUS_RELEASE}/yetus-${YETUS_RELEASE}-bin.tar.gz.asc"
    echo "verifying yetus release"
    gpg --homedir "${WORKSPACE}/.gpg" --verify "yetus-${YETUS_RELEASE}-bin.tar.gz.asc"
    mv "yetus-${YETUS_RELEASE}-bin.tar.gz" yetus.tar.gz
  else
    echo "Reusing cached download of Apache Yetus version ${YETUS_RELEASE}."
  fi
else
  YETUS_DIR="${WORKSPACE}/yetus-git"
  rm -rf "${YETUS_DIR}"
  echo "downloading from github"
  curl -L --fail https://api.github.com/repos/apache/yetus/tarball/HEAD -o yetus.tar.gz
fi
if [ ! -d "${YETUS_DIR}" ]; then
  echo "unpacking yetus into '${YETUS_DIR}'"
  mkdir -p "${YETUS_DIR}"
  gunzip -c yetus.tar.gz | tar xpf - -C "${YETUS_DIR}" --strip-components 1
fi
	'''
    // TODO we can move the personality install into a different stage and then use stash to deploy it.
	dir ("${env.TOOLS}") {
	  sh """#!/usr/bin/env bash
echo "Downloading Project personality."
curl -L  -o personality.sh "${env.PROJET_PERSONALITY}"
	"""
	}
	sh '''#!/usr/bin/env bash
YETUS_ARGS=()
YETUS_ARGS=("--multijdktests=compile,findbugs,unit" "${YETUS_ARGS[@]}")
YETUS_ARGS=("--personality=${TOOLS}/personality.sh" "${YETUS_ARGS[@]}")
YETUS_ARGS=("--basedir=${BASEDIR}" "${YETUS_ARGS[@]}")
YETUS_ARGS=("--archive-list=TEST-*.xml" "${YETUS_ARGS[@]}")
YETUS_ARGS=("--console-urls" "${YETUS_ARGS[@]}")
YETUS_ARGS=("--docker" "${YETUS_ARGS[@]}")
YETUS_ARGS=("--dockerfile=${BRANCH_SPECIFIC_DOCKERFILE}" "${YETUS_ARGS[@]}")
YETUS_ARGS=("--empty-patch" "${YETUS_ARGS[@]}")
YETUS_ARGS=("--html-report-file=${OUTPUTDIR}/console-report.html" "${YETUS_ARGS[@]}")
YETUS_ARGS=("--jenkins" "${YETUS_ARGS[@]}")
YETUS_ARGS=("--mvn-custom-repos" "${YETUS_ARGS[@]}")
YETUS_ARGS=("--patch-dir=${OUTPUTDIR}" "${YETUS_ARGS[@]}")
YETUS_ARGS=("--project=${PROJECT}" "${YETUS_ARGS[@]}")
YETUS_ARGS=("--resetrepo" "${YETUS_ARGS[@]}")
YETUS_ARGS=("--author-ignore-list=${AUTHOR_IGNORE_LIST}" "${YETUS_ARGS[@]}")
YETUS_ARGS=("--whitespace-eol-ignore-list=${WHITESPACE_IGNORE_LIST}" "${YETUS_ARGS[@]}")
YETUS_ARGS=("--whitespace-tabs-ignore-list=${WHITESPACE_IGNORE_LIST}" "${YETUS_ARGS[@]}")
YETUS_ARGS=("--sentinel" "${YETUS_ARGS[@]}")
YETUS_ARGS=("--branch=${BRANCH_NAME}" "${YETUS_ARGS[@]}")
YETUS_ARGS=("--tests-filter=${TESTS_FILTER}" "${YETUS_ARGS[@]}")

rm -rf "${OUTPUTDIR}"
mkdir -p "${OUTPUTDIR}"
if [[ true !=  "${USE_YETUS_PRERELEASE}" ]]; then
  YETUS_ARGS=("--shelldocs=${WORKSPACE}/yetus-${YETUS_RELEASE}/bin/shelldocs" "${YETUS_ARGS[@]}")
  TESTPATCHBIN="${WORKSPACE}/yetus-${YETUS_RELEASE}/bin/test-patch"
else
  YETUS_ARGS=("--shelldocs=${WORKSPACE}/yetus-git/shelldocs/shelldocs.py" "${YETUS_ARGS[@]}")
  TESTPATCHBIN="${WORKSPACE}/yetus-git/precommit/test-patch.sh"
fi
echo "Launching yetus with command line:"
echo "${TESTPATCHBIN} ${YETUS_ARGS[@]}"

/usr/bin/env bash "${TESTPATCHBIN}" "${YETUS_ARGS[@]}"
	'''
      }
    }
  }
  post {
    always {
// TODO junit test results
      // gzip surefire reports. (copied from precommit job. Need to account for archive placing things in the outputdir.)
//      sh """#!/bin/bash -e
//find '${env.BASEDIR}' -path '*/target/surefire-reports/*' | zip '${env.OUTPUTDIR}/test_logs.zip' -@
//"""
      archive "${env.OUTPUTDIR}/*,${env.OUTPUTDIR}/**/*,**/VERSION"
      publishHTML target: [
        allowMissing: true,
        keepAll: true,
        alwaysLinkToLastBuild: true,
        // has to be relative to WORKSPACE :(
        reportDir: 'artifacts',
        reportFiles: 'console-report.html',
        reportName: 'Nightly Build Report'
      ]
    }
    failure {
      deleteDir()
    }
  }
}

